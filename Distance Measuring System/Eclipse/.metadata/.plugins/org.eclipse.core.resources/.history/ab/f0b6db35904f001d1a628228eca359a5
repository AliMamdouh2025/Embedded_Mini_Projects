/******************************************************************************
 *
 * Module: ULTRASONIC
 *
 * File Name: ultrasonic.c
 *
 * Description: Source file for the AVR ULTRASONIC driver
 *
 * Author: Ali Mamdouh
 *
 *******************************************************************************/

#include "ultrasonic.h"
#include "icu.h"
#include "gpio.h"
#include "common_macros.h" /* To use the macros like SET_BIT */
#include <util/delay.h> /* For the delay functions */
#include <avr/io.h>

uint8 g_edgeCount = 0;
uint16 Distance = 0;
uint16 EchoPulseTime = 0; //Time Echo pin was high
uint16 EchoPulseTime_High_Low = 0; //Time Echo pin was high
uint16 EchoPulseTime_Low = 0; //Time Echo pin was high
uint8 FallingEdge = 0;
/*
 * Description :
 * Initialize the ICU driver as required.
 * Setup the ICU call back function.
 * Setup the direction for the trigger pin as output pin through the GPIO driver.
 */
void Ultrasonic_init(void)
{
	GPIO_setupPinDirection(TRIGGER_PORT,TRIGGER_PIN,PIN_OUTPUT);
	GPIO_writePin(TRIGGER_PORT,TRIGGER_PIN,0);
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
	Icu_init(&Icu_Config);
	Icu_setCallBack(Ultrasonic_edgeProcessing);
}

/*
 * Description :
 * Send the Trigger pulse to the ultrasonic.
 */
void Ultrasonic_Trigger(void)
{
	GPIO_writePin(TRIGGER_PORT,TRIGGER_PIN,1);
	_delay_us(10);
	GPIO_writePin(TRIGGER_PORT,TRIGGER_PIN,0);
	//_delay_us(200); //for8 pulses
}

/*
 * Description :
 * Send the trigger pulse by using Ultrasonic_Trigger function.
 * Start the measurements by the ICU from this moment.
 */
uint16 Ultrasonic_readDistance(void)
{
	Ultrasonic_Trigger();
	while(FallingEdge == 0); //wait until Echo pin is falling
	FallingEdge = 0;

	Distance = EchoPulseTime/57.8;
    return Distance;
}

/*
 * Description :
 * This is the call back function called by the ICU driver.
 * This is used to calculate the high time (pulse time) generated by the ultrasonic sensor.
 */
void Ultrasonic_edgeProcessing(void)
{
	g_edgeCount++;

	if(g_edgeCount == 1) //First call echo is high so we measure the Pulse until it is low
	{
		//Icu_clearTimerValue();
		EchoPulseTime_Low = Icu_getInputCaptureValue();
		Icu_setEdgeDetectionType(FALLING);
	}
	else if(g_edgeCount == 2)
	{
		EchoPulseTime_High_Low = Icu_getInputCaptureValue();
		Icu_setEdgeDetectionType(RISING); //return setup to its initial value
		Icu_clearTimerValue();
		g_edgeCount = 0;
		FallingEdge = 1;
	}
}
